version: "3.8"

services:
  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: websitemaster
      POSTGRES_PASSWORD: local
      POSTGRES_DB: cloudappdb
    ports:
      - "5433:5432"

  postgres-ml:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: segmentmaster
      POSTGRES_PASSWORD: segment
      POSTGRES_DB: segmentationdb
    ports:
      - "5434:5432"

  mysql:
    image: mysql:8.0
    container_name: mysql-petstore
    ports:
      - "3307:3307"
    volumes:
      - petstore:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: petstore

  mongo:
    image: mongo
    container_name: mongo-chat
    ports:
      - '27018:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: websitemaster
      MONGO_INITDB_ROOT_PASSWORD: local
      MONGO_INITDB_DATABASE: cloudappdb

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.3
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.2.3
    container_name: kafka
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_CREATE_TOPICS: 'chat'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://host.docker.internal:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  web-proxy:
    image: web-proxy:latest
    container_name: web-proxy
    ports:
      - 8500:8500
  vehicles-api:
    image: vehicles-api:latest
    container_name: vehicles-api
    ports:
      - 8880:8880
  petstore:
    image: petstore:latest
    container_name: petstore
    ports:
      - 8083:8083
  cloudapp:
    image: cloudapp:latest
    container_name: cloudapp
    ports:
      - 8099:8099
    environment:
      - DOCKER_HOST_IP=host.docker.internal
  ml-pipeline:
    build:
      context: ./backend/ml-pipeline
      dockerfile: Dockerfile
    container_name: ml-pipeline
    ports:
      - 8600:8600
    environment:
      - DOCKER_HOST_IP=host.docker.internal
volumes:
  petstore: